---
description: 
globs: 
alwaysApply: false
---
### 项目说明：基于 Gin 的 RBAC 权限管理系统

#### 1. **项目概述**
本项目是一个基于 Gin 框架的后台管理系统，核心功能是实现基于角色的访问控制（RBAC）。通过 JWT 认证和 RBAC 权限管理，系统能够对用户、角色、权限和菜单进行精细化管理，确保不同角色的用户只能访问其具备权限的资源。

#### 2. **核心功能**
- **用户认证**：通过 JWT 实现用户登录和认证，支持双 Token（Access Token 和 Refresh Token）。
- **角色管理**：支持创建、编辑、删除角色，并为角色分配权限。
- **权限管理**：支持权限的创建、编辑、删除，并通过权限树展示权限层级关系。
- **菜单管理**：支持菜单的创建、编辑、删除，并与权限关联，实现动态菜单展示。
- **RBAC 中间件**：通过中间件实现 API 级别的权限控制，确保用户只能访问其具备权限的接口。
- **权限同步**：通过扫描控制器文件中的注解，自动同步权限到数据库。

#### 3. **项目结构**
```
├── app
│   ├── admin
│   │   ├── controllers        # 控制器层
│   │   ├── models             # 数据模型层
│   │   └── services           # 服务层
├── config                     # 配置文件
├── migrations                 # 数据库迁移脚本
├── pkg
│   ├── auth                   # 认证模块
│   ├── middleware             # 中间件
│   ├── response               # 统一响应处理
│   └── utils                  # 工具函数
├── routes                     # 路由配置
└── main.go                    # 入口文件
```

#### 4. **核心模块**
- **JWT 认证**：通过 `pkg/auth/jwt.go` 实现 JWT 的生成和解析，支持双 Token 机制。
- **RBAC 中间件**：通过 `pkg/middleware/rbac.go` 实现基于角色的权限控制，支持动态权限检查。
- **权限模型**：通过 `app/admin/models/permissionModel.go` 定义权限、角色和用户之间的关系。
- **权限服务**：通过 `app/admin/services/permissionService.go` 提供权限检查和权限树构建的功能。
- **路由配置**：通过 `routes/routes.go` 配置 API 路由，并添加 JWT 认证和 RBAC 权限检查。

#### 5. **数据库设计**
- **用户表**：存储用户的基本信息（如 `username`、`password`、`status` 等）。
- **角色表**：存储角色的基本信息（如 `name`、`description` 等）。
- **权限表**：存储权限的基本信息（如 `name`、`code`、`description` 等）。
- **用户-角色关联表**：存储用户与角色的关联关系。
- **角色-权限关联表**：存储角色与权限的关联关系。
- **菜单表**：存储菜单的基本信息（如 `name`、`path`、`icon` 等）。
- **菜单-权限关联表**：存储菜单与权限的关联关系。

#### 6. **开发提示**
- **权限同步**：通过 `SyncPermissions` 方法扫描控制器文件中的注解，自动同步权限到数据库。
- **权限树构建**：通过 `BuildPermissionTree` 方法递归构建权限树，支持动态展示权限层级关系。
- **RBAC 中间件**：通过 `RBAC` 中间件实现 API 级别的权限控制，确保用户只能访问其具备权限的接口。

#### 7. **待开发功能**
- **数据权限控制**：根据用户角色或权限控制数据的访问范围。
- **操作日志记录**：记录用户的操作日志，便于审计和排查问题。
- **性能优化**：优化权限检查的查询性能，减少数据库查询次数。
- **扩展功能**：根据业务需求扩展更多的权限管理功能，如部门管理、数据权限等。

#### 8. **AI 辅助编程提示**
- **代码生成**：根据控制器文件中的注解自动生成权限代码。
- **权限检查优化**：优化 `CheckUserPermission` 方法的查询逻辑，减少数据库查询次数。
- **权限树展示**：根据权限树动态生成前端菜单，支持多级菜单展示。
- **错误处理**：统一处理权限检查中的错误，确保系统稳定性。

#### 9. **示例代码**
```go
// 示例：RBAC 中间件
func RBAC(requiredCodes ...string) gin.HandlerFunc {
    return func(c *gin.Context) {
        userID, exists := c.Get("user_id")
        if !exists {
            response.Unauthorized(c, "用户未认证")
            return
        }

        userPerms, err := loadUserPermissions(userID.(uint))
        if err != nil {
            response.Error(c, err)
            return
        }

        if !hasPermission(userPerms, requiredCodes) {
            response.Forbidden(c, "无权访问")
            return
        }

        c.Next()
    }
}
```

#### 10. **总结**
本项目已经完成了 RBAC 权限管理的核心模块，包括用户认证、角色管理、权限管理、菜单管理以及 API 级别的权限控制。接下来可以根据业务需求进行功能扩展和性能优化。AI 辅助编程可以帮助我们快速生成代码、优化查询逻辑、动态生成菜单等，提高开发效率。

如果你们在项目中遇到具体的问题或需要进一步的帮助，请随时告诉我！

